|**I/O**|**文件系统**|**进程**|**线程**|**进程间通信**|
|:--:|:--:|:--:|:--:|:--:|
|[一.文件I/O](#ch1)<br>[三.标准I/O库](#ch3)<br>[八.高级I/O](#ch8)|[二.文件和目录](#ch2)|[四.进程环境](#ch4)<br>[五.进程控制](#ch5)|[六.线程](#ch6)<br>[七.线程控制](#ch7)|[九.进程间通信](#ch9)<br>[十.信号](../interview/temp/信号.md)|

<br>
<br>

<div align="center"> <img src="../pic/apue-basic-1.png"/> </div>

<br>
<br>

<h2 id="ch1"></h2>

* [一.文件I/O](#一文件io)
    - [1.文件描述符](#1文件描述符)
    - [2.相关调用](#2相关调用)
        + [2.1 打开文件](#21-打开文件)
        + [2.2 创建文件](#22-创建文件)
        + [2.3 关闭文件](#23-关闭文件)
        + [2.4 定位读写位置](#24-定位读写位置)
        + [2.5 文件读](#25-文件读)
        + [2.6 文件写](#26-文件写)
        + [2.7 fcntl函数](#27-fcntl函数)
    - [3.进程间文件共享](#3进程间文件共享)
    - [4.原子操作](#4原子操作)
    - [5.数据同步](#5数据同步)

<h2 id="ch2"></h2>

* [二.文件和目录](#二文件和目录)
    - 前言：[文件系统](#文件系统)
    - [1.获取文件信息](#1获取文件信息)（stat、fstat、lstat、fstatat）
    - [2.文件类型](#2文件类型)
    - [3.用户ID和组ID](#3用户id和组id)
        + [3.1 进程与文件的用户ID及组ID](#31-进程与文件的用户id及组id)
        + [3.2 修改文件的所有者和组所有者](#32-修改文件的所有者和组所有者)（chown、fchown、fchownat、lchown）
    - [4.文件访问权限](#4文件访问权限)
        + [4.1 进程的文件访问权限](#41-进程的文件访问权限)（access、faccessat）
        + [4.2 新文件的文件访问权限](#42-新文件的文件访问权限)（umask）
        + [4.3 修改文件访问权限](#43-修改文件访问权限)（chmod、fchmod、fchmodat）
    - [5.新文件和目录的所有权](#5新文件和目录的所有权)
    - [6.粘着位](#6粘着位)
    - [7.文件长度](#7文件长度)
        + [7.1 文件中的空洞](#71-文件中的空洞)
        + [7.2 文件截断](#72-文件截断)（truncate、ftruncate）
    - [8.硬链接](#8硬链接)
        + [8.1 创建硬链接](#81-创建硬链接)（link、linkat）
        + [8.2 删除硬链接](#82-删除硬链接)（unlink、unlinkat）
    - [9.符号链接](#9符号链接)
        + [9.1 创建符号链接](#91-创建符号链接)（symlink、symlinkat）
        + [9.2 读取符号链接](#92-读取符号链接)（readlink、readlinkat）
    - [10.目录](#10目录)
        + [10.1 创建目录](#101-创建目录)（mkdir、mkdirat）
        + [10.2 删除目录](#102-删除目录)（rmdir）
        + [10.3 读目录](#103-读目录)（opendir、fdopendir、readdir、rewinddir、closedir、telldir、seekdir）
        + [10.4 更改当前目录](#104-更改当前目录)（chdir、fchdir）
        + [10.5 获取当前目录的绝对路径](#105-获取当前目录的绝对路径)（getcwd）
    - [11.重命名](#11重命名)（rename、renameat）
    - [12.文件的时间](#12文件的时间)
        + [12.1 更改文件的访问和修改时间](#121-更改文件的访问和修改时间)（futimens、utimensat、utimes）
    - [13.设备特殊文件](#13设备特殊文件)

<h2 id="ch3"></h2>

* [三.标准I/O库](#三标准io库)
    - [1.流](#1流)
        + [1.1 流的定向](#11-流的定向)（fwide）
        + [1.2 3个标准流](#12-3个标准流)
    - [2.FILE对象](#2file对象)
    - [3.缓冲](#3缓冲)
        + [3.1 3种缓冲类型](#31-3种缓冲类型)（setbuf、setvbuf）
        + [3.2 缓冲区冲洗](#32-缓冲区冲洗)（fflush）
        + [3.3 标准流与缓冲](#33-标准流与缓冲)
    - [4.相关调用](#4相关调用)
        + [4.1 打开流](#41-打开流)（fopen、freopen、fdopen）
        + [4.2 关闭流](#42-关闭流)
        + [4.3 读写流](#43-读写流)
        + [4.4 定位流](#44-定位流)
        + [4.5 格式化I/O](#45-格式化io)
        + [4.6 获取流相应的文件描述符](#46-获取流相应的文件描述符)
        + [4.7 创建临时文件](#47-创建临时文件)
    - [5.内存流](#5内存流)

<h2 id="ch4"></h2>

* [四.进程环境](#四进程环境)
    - [1.进程的启动与终止](#1进程的启动与终止)
        + [1.1 main函数](#11-main函数)
        + [1.2 进程终止的方式](#12-进程终止的方式)
        + [1.3 终止函数](#13-终止函数)
        + [1.4 终止状态](#14-终止状态)
        + [1.5 登记终止处理程序](#15-登记终止处理程序)
    - [2.环境表](#2环境表)
        + [2.1 获取环境变量](#21-获取环境变量)
        + [2.2 修改环境变量](#22-修改环境变量)
    - [3.C程序的存储空间布局](#3c程序的存储空间布局)
    - [4.共享库](#4共享库)
    - [5.进程堆空间的管理](#5进程堆空间的管理)
    - [6.进程资源限制](#6进程资源限制)
    - [7.Core Dump](#7core-dump)（外加）
        + [7.1 Core Dump的概念及用途](#71-core-dump的概念及用途)
        + [7.2 产生Core Dump](#72-产生core-dump)
        + [7.3 调试Core Dump](#73-调试core-dump)

<h2 id="ch5"></h2>

* [五.进程控制](#五进程控制)
    - [1.进程标识](#1进程标识)
        + [1.1 2个特殊进程](#11-2个特殊进程)
        + [1.2 进程相关的ID获取函数](#12-进程相关的id获取函数)
    - [2.进程的创建](#2进程的创建)
        + [2.1 fork](#21-fork)
        + [2.2 vfork](#22-vfork)
    - [3.进程的终止](#3进程的终止)
        + [3.1 子进程向父进程传递状态](#31-子进程向父进程传递状态)
        + [3.2 父子进程以不同顺序终止](#32-父子进程以不同顺序终止)
    - [4.竞争条件](#4竞争条件)
    - [5.exec函数](#5exec函数)
    - [6.更改用户ID和更改组ID](#6更改用户id和更改组id)
    - [7.system函数](#7system函数)
    - [8.用户标识](#8用户标识)
    - [9.进程调度](#9进程调度)
    - [10.进程时间](#10进程时间)

<h2 id="ch6"></h2>

* [六.线程](#六线程)
    - [1.相关函数](#1相关函数)
        + [pthread_create函数](#1pthread_create函数)
        + [pthread_join函数](#2pthread_join函数)
        + [pthread_self函数](#3pthread_self函数)
        + [pthread_detach函数](#4pthread_detach函数)
        + [pthread_exit函数](#5pthread_exit函数)
        + [pthread_equal函数](#6pthread_equal函数)
        + [pthread_cancel函数](#7pthread_cancel函数)
        + [pthread_cleanup_push和pthread_cleanup_pop函数](#8pthread_cleanup_push和pthread_cleanup_pop函数)
    - [2.线程同步](#2线程同步)
        + [2.1 互斥锁](#21-互斥锁)
        + [2.2 读写锁](#22-读写锁)
        + [2.3 条件变量](#23-条件变量)
        + [2.4 自旋锁](#24-自旋锁)
        + [2.5 屏障](#25-屏障)

<h2 id="ch7"></h2>

* [七.线程控制](#七线程控制)
    - [1.线程限制](#1线程限制)
    - [2.线程属性](#2线程属性)
        + [2.1 线程属性](#21-线程属性)
        + [2.2 取消选项](#22-取消选项)
    - [3.同步属性](#3同步属性)
        + [3.1 互斥锁属性](#31-互斥锁属性)
        + [3.2 读写锁属性](#32-读写锁属性)
        + [3.3 条件变量属性](#33-条件变量属性)
        + [3.4 屏障属性](#34-屏障属性)
    - [4.线程特定数据](#4线程特定数据)
        + [pthread_once和pthread_key_create函数](#1pthread_once和pthread_key_create函数)
        + [pthread_getspecific和pthread_setspecific函数](#2pthread_getspecific和pthread_setspecific函数)
        + [pthread_key_delete函数](#3pthread_key_delete函数)
    - [5.线程和信号](#5线程和信号)
        + [5.1 阻止信号发送](#51-阻止信号发送)
        + [5.2 等待信号](#52-等待信号)
    - [6.线程和fork](#6线程和fork)
    - [7.线程和I/O](#7线程和io)

<h2 id="ch8"></h2>

* [八.高级I/O](#八高级io)
    - [1.非阻塞I/O](https://github.com/arkingc/note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8D%B71.md#%E4%B9%9D%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8Fio)
    - [2.记录锁](#2记录锁)
    - [3.I/O复用](https://github.com/arkingc/note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8D%B71.md#%E5%9B%9Bio%E5%A4%8D%E7%94%A8)
    - [4.异步I/O](#4异步io)
        + [4.1 AIO控制块](#41-aio控制块)
        + [4.2 异步读与异步写](#42-异步读与异步写)
        + [4.3 获取异步I/O的状态](#43-获取异步io的状态)
        + [4.4 获取异步I/O返回值](#44-获取异步io返回值)
        + [4.5 阻塞进程到异步I/O完成](#45-阻塞进程到异步io完成)
        + [4.6 取消异步I/O](#46-取消异步io)
        + [4.7 批量提交异步I/O请求](#47-批量提交异步io请求)
        + [4.8 异步I/O的数量限制](#48-异步io的数量限制)
    - [5.readv与writev](https://github.com/arkingc/note/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/UNIX%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8D%B71.md#2readv%E5%92%8Cwritev%E5%87%BD%E6%95%B0)
    - [6.存储映射I/O](#6存储映射io)
        + [6.1 mmap建立映射](#61-mmap建立映射)
        + [6.2 mprotect修改映射区权限](#62-mprotect修改映射区权限)
        + [6.3 msync冲洗映射区](#63-msync冲洗映射区)
        + [6.4 munmap解除映射](#64-munmap解除映射)

<h2 id="ch9"></h2>

* [九.进程间通信](#十进程间通信)
    - [1.管道](#1管道)
        + [1.1 创建管道](#11-创建管道)
        + [1.2 管道的读写规则](#12-管道的读写规则)
        + [1.3 标准I/O库管道函数](#13-标准io库管道函数)
    - [2.协同进程](#2协同进程)
    - [3.FIFO](#3fifo)
        + [3.1 创建FIFO](#31-创建fifo)
        + [3.2 打开FIFO](#32-打开fifo)
        + [3.3 读写FIFO](#33-读写fifo)
    - [4.XSI IPC](#4xsi-ipc)
        + [5.消息队列](#5消息队列)
            * [5.1 与消息队列相关的结构](#51-与消息队列相关的结构)
            * [5.2 创建或打开消息队列](#52-创建或打开消息队列)
            * [5.3 操作消息队列](#53-操作消息队列)
            * [5.4 添加消息](#54-添加消息)
            * [5.5 获取消息](#55-获取消息)
        + [6.信号量](#6信号量)
            * [6.1 信号量的相关结构](#61-信号量的相关结构)
            * [6.2 获得信号量](#62-获得信号量)
            * [6.3 操作信号量](#63-操作信号量)
        + [7.共享存储](#7共享存储)
            * [7.1 共享存储的内核结构](#71-共享存储的内核结构)
            * [7.2 创建或获得共享存储](#72-创建或获得共享存储)
            * [7.3 操作共享存储](#73-操作共享存储)
            * [7.4 与共享存储段连接](#74-与共享存储段连接)
            * [7.5 与共享存储段分离](#75-与共享存储段分离)
    - [8.POSIX信号量](#8posix信号量)
        + [8.1 创建或获取命名信号量](#81-创建或获取命名信号量)
        + [8.2 关闭释放信号量](#82-关闭释放信号量)
        + [8.3 销毁命名信号量](#83-销毁命名信号量)
        + [8.4 调节信号量的值](#84-调节信号量的值)
        + [8.5 创建未命名信号量](#85-创建未命名信号量)
        + [8.6 销毁未命名信号量](#86-销毁未命名信号量)
        + [8.7 检索未命名信号量的值](#87-检索未命名信号量的值)

<br>
<br>
<br>
<br>

# 一.文件I/O
  
本章描述的函数经常被称为**不带缓冲的I/O**，不带缓冲值的是每个read和write都调用内核中的一个系统调用。这些不带缓冲的I/O函数不是ISO C的组成部分，它们是POSIX.1和Single UNIX Specification的组成部分

## 1.文件描述符

对于内核而言，所有打开的文件都通过文件描述符引用。文件描述符是一个非负数。范围是0~OPEN_MAX-1。当进程创建时，默认为它打开了3个文件描述符，它们都链接向终端：

* 0： 标准输入
* 1： 标准输出
* 2： 标准错误输出

通常使用`STDIN_FILENO`，`STDOUT_FILENO`和 `STDERR_FILENO`来替代这三个幻数，从而提高可读性。这三个常量位于`<unistd.h>`中

### 复制文件描述符

<div align="center"> <img src="../pic/apue-fileio-10.png"/> </div>

* 对于`dup`函数
    - 返回的新的文件描述符一定是当前可用的文件描述符中最小的数字
* 对于`dup2`函数：
    - 如果 `fd2`已经是被打开的文件描述符且不等于`fd`，则先将其关闭，然后再打开（<font color='red'>注意关闭再打开是一个原子操作</font>）
    - 如果 `fd2`等于`fd`，则直接返回`fd2`（也等于`fd`），而不作任何操作

这些函数返回的新文件描述符与参数fd共享同一个文件表项：

<div align="center"> <img src="../pic/apue-fileio-11.png"/> </div>

<br>

## 2.相关调用

### 2.1 打开文件
